{"version":3,"sources":["webpack://app/webpack/bootstrap","webpack://app/./js/app.js","webpack://app/./js/button.js","webpack://app/./js/global_var.js","webpack://app/./js/math.js","webpack://app/./js/modal.js","webpack://app/./js/mouse.js","webpack://app/./js/plot.js","webpack://app/./js/touch.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,M;;;;;;;;;;;;;ACnPA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,C;;;;;;;;;;;;;;ACxCA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA,8B;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA,sBAAsB;;AAEtB;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA,sBAAsB;;AAEtB;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA,8BAA8B;;AAE9B;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa;AACb;AACA,4BAA4B;;AAE5B;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA,oCAAoC;;AAEpC;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,cAAc;AACd;;AAEA;;;;;;;;;;;;;;AC3GA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;ACnDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA,C;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA,wBAAwB;;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qHAAqH,qFAAqF;AAC1M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mDAAmD,6CAA6C;AAChG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,6CAA6C;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,uHAAuH,gFAAgF;AACvM;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,Q;;;;;;;;;;;;;;AC5gBD;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,C","file":"build.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/app.js\");\n","/**\r\n * @module touch\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0 beta 1\r\n * @todo довести до ума\r\n */\r\n\r\n'use strict'\r\n\r\nimport * as VAR from './global_var'\r\nimport Modal    from './modal'\r\nimport Plot     from './plot'\r\nimport Mymath   from './math'\r\nimport {ButtonToggle} from './button.js'\r\n\r\n// т.к eval не видит Mymath\r\nlet log = Mymath.log\r\nlet randomInt = Mymath.getRnd\r\n\r\nlet canvas = document.getElementById(\"plot\")\r\nlet info_btn = document.getElementById(\"info_btn\")\r\nlet block_btn = document.getElementById(\"block_btn\")\r\nlet derivative_btn = document.getElementById(\"derivative_btn\")\r\n\r\nlet info_rus = document.getElementById(\"info-rus\")\r\nlet info_rus_modal = new Modal(info_rus)\r\n\r\n// let info_eng = document.getElementById(\"info_eng\")\r\n// let info_eng_modal = new Modal(info_rus)\r\n\r\nlet warning_rus = document.getElementById(\"warning-rus\")\r\nlet warning_rus_modal = new Modal(warning_rus)\r\n\r\n// let warning_eng = document.getElementById(\"warning_eng\")\r\n// let warning_eng_modal = new Modal(warning_eng)\r\n\r\n/**\r\n * Calculate a factorial of a number\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nlet factorial = (num) => {\r\n  if (num === 1)\r\n    return 1\r\n  return num * factorial(num - 1)\r\n}\r\n\r\nlet factorial_reg = (match, p1) => {\r\n  return factorial(+p1)\r\n}\r\n\r\nlet persentage_reg = (match, p1) => {\r\n  return +p1 / 100\r\n}\r\n\r\nlet ctg_reg = (match, p1, p2, p3) => {\r\n  return p1 + \"1 / Math.tan(\" + p3\r\n}\r\n\r\nlet actg_reg = (match, p1, p2, p3) => {\r\n  return p1 + \"Math.PI / 2 - Math.atan(\" + p3\r\n}\r\n\r\nlet log_reg = (match, p1, p2, p3) => {\r\n  return p1 + \"log(\" + p3\r\n}\r\n\r\nlet abs_reg = (match, p1, p2, p3) => {\r\n  return p1 + \"Math.abs(\" + p2 + \")\" + p3\r\n}\r\n\r\nlet random_int_reg = (match, p1, p2, p3) => {\r\n  return p1 + \"randomInt\" + p3\r\n}\r\n/**\r\n * Analize a function for errors and replace\r\n * @param {string}\r\n * return {string | false}\r\n */\r\nlet analize = (value) => {\r\n  let func = \" \" + value + \" \" // это нужно для правильной работы reg выражений\r\n\r\n  let replaces = [\r\n    [/sin|asin|cos|acos|tan|atan|atan2|exp|abs|sqrt|pow|log10|sign|E|PI|random|max|min|cbrt|floor|ceil|round/g, \"Math.$&\"],\r\n    [/(\\W)(ln)(\\W)/gi, \"$1Math.log$3\"],\r\n    [/(\\W)(pi)(\\W)?/g, \"$1Math.PI$3\"],\r\n    [/(\\W)(tg)(\\W)/gi, \"$1Math.tan$3\"],\r\n    [/(\\W)(ctg)\\((.+)/gi, ctg_reg],\r\n    [/(\\W)(sgn)(\\W)/gi, \"$1Math.sign$3\"],\r\n    [/(\\W)(rndi)(\\W)?/gi, random_int_reg],\r\n    [/(\\W)(rnd)(\\W)?/gi, \"$1Math.random()$3\"],\r\n    [/(\\W)(arctg)(\\W)/gi, \"$1Math.atan$3\"],\r\n    [/(\\W)(arcsin)(\\W)/gi, \"$1Math.asin$3\"],\r\n    [/(\\W)(arccos)(\\W)/gi, \"$1Math.acos$3\"],\r\n    [/(\\W)\\|(.+)\\|(\\W)?/gi, abs_reg],\r\n    [/(\\W)(arcctg)\\((.+)/gi, actg_reg],\r\n    [/(\\W)(log)\\((.+)/gi, log_reg],\r\n    [/\\^/gi, \"**\"],\r\n    [/(\\d+)x/gi, \"$1*x\"],\r\n    [/(\\d)!/gi, factorial_reg],\r\n    [/(\\d+)%/gi, persentage_reg]\r\n  ]\r\n\r\n  for (let i = 0, len = replaces.length; i < len; i++)\r\n    func = func.replace(replaces[i][0], replaces[i][1])\r\n  // переменные доступныя во время исполнения\r\n  let x = 5\r\n  let time = 10\r\n  let mx = 0\r\n  let my = 0\r\n  \r\n  // проверка на ошибки\r\n  try {\r\n    let test = eval(func)\r\n  } catch (err) {\r\n    return false\r\n  }\r\n  return func\r\n}\r\n\r\nlet add = document.getElementById(\"add\")\r\nlet funcs_set_wrap = document.querySelector(\".funcs-set-wrap\")\r\nlet info = document.querySelector(\".info-btn\")\r\n\r\n// для функций\r\nlet num = 0\r\n\r\nlet default_grafics = \"sin(x - mx) * my / (x - mx) * sin(x)\"\r\n\r\nlet plot = new Plot(canvas, window.innerWidth, window.innerHeight - VAR.HEADER_HEIGHT - VAR.BOTTOM_PANEL_HEIGHT)\r\nplot.init({\r\n  ratio: 50,\r\n  scale: 1,\r\n  detail: 1,\r\n  background: \"#ECEFF1\",\r\n  axisLineWidth: 2,\r\n  axisColor: \"#9E9E9E\",\r\n  axisOffsetWidth: 20,\r\n  axisOffsetHeight: 20,\r\n  functionColor: \"#E64A19\",\r\n  functionWidth: 2,\r\n  markupColor: \"#00BCD4\",\r\n  markupLineWidth: 1,\r\n  markupTextColor: \"#00BCD4\"\r\n})\r\n\r\nplot.add(analize(default_grafics))\r\n\r\nlet val\r\n\r\nfuncs_set_wrap.addEventListener(\"click\", (e) => {\r\n  \r\n  if (e.target.classList.contains(\"func-input\")) {\r\n    let val = prompt(\"set value\", e.target.innerText);\r\n    if (val === null) {\r\n      return\r\n    }\r\n\r\n    let func = analize(val)\r\n    if (func !== false) {\r\n      plot.set(+e.target.parentNode.getAttribute(\"data-num\"), func)\r\n    } else {\r\n      warning_rus_modal.show()\r\n      return\r\n    }\r\n    e.target.innerText = val\r\n  } else if (e.target.classList.contains(\"del\")) {\r\n    setTimeout(() => {\r\n      e.target.parentNode.classList.add(\"remove\")\r\n      setTimeout(() => {\r\n        plot.remove(+e.target.parentNode.getAttribute(\"data-num\"))\r\n        e.target.parentNode.remove()\r\n      }, 400)\r\n    }, 300)\r\n  }\r\n})\r\n\r\nadd.addEventListener(\"click\", () => {\r\n  let func_set = document.createElement(\"div\")\r\n  func_set.className = \"func-set\"\r\n  let func_input_cur = document.createElement(\"span\")\r\n  func_input_cur.className = \"func-input btn waves-effect waves-light\"\r\n  let del_cur = document.createElement(\"span\")\r\n  del_cur.className = \"del btn waves-effect waves-light\"\r\n\r\n  let val = prompt(\"set value\", \"\")\r\n  if (val === null)\r\n    return\r\n\r\n  let f = analize(val)\r\n  if (f !== false) {\r\n    plot.add(f)\r\n    plot.update()\r\n  } else {\r\n    warning_rus_modal.show()\r\n    return\r\n  }\r\n\r\n  func_input_cur.innerText = val\r\n  func_set.setAttribute(\"data-num\", ++num)\r\n  del_cur.innerText = \"×\"\r\n\r\n  func_set.appendChild(func_input_cur)\r\n  func_set.appendChild(del_cur)\r\n  funcs_set_wrap.appendChild(func_set)\r\n})\r\n\r\ninfo_btn.addEventListener(\"click\", () => {\r\n  info_rus_modal.show()\r\n})\r\n\r\nlet block_btn_toggle = new ButtonToggle()\r\nblock_btn_toggle.init(block_btn)\r\nblock_btn_toggle.setActiveCallback(() => {\r\n  plot.setState(\"moveable\", false)\r\n})\r\nblock_btn_toggle.setDisactiveCallback(() => {\r\n  plot.setState(\"moveable\", true)\r\n})\r\n\r\nlet derivative_btn_toggle = new ButtonToggle()\r\nderivative_btn_toggle.init(derivative_btn)\r\nderivative_btn_toggle.setActiveCallback(() => {\r\n  plot.setState(\"build_derivatives\", true)\r\n})\r\nderivative_btn_toggle.setDisactiveCallback(() => {\r\n  plot.setState(\"build_derivatives\", false)\r\n})\r\n\r\nWaves.init({\r\n  duration: 700\r\n});\r\n\r\nif (device.mobile()) {\r\n\r\n}\r\n\r\n// animation\r\nlet loop = () => {\r\n  plot.render()\r\n  requestAnimationFrame(loop)\r\n}\r\n\r\nloop()","/**\r\n * @module button.js\r\n * @author\r\n * @version\r\n */\r\n\r\n /**\r\n  *\r\n  *\r\n  *\r\n  */\r\nexport class ButtonToggle {\r\n    constructor() {}\r\n\r\n    init(elem) {\r\n        this.elem = elem\r\n        elem.addEventListener(\"click\", () => {\r\n          if (this.isActive()) {\r\n            elem.classList.remove(\"active\")\r\n            this.disactive_callback()\r\n          } else {\r\n            elem.classList.add(\"active\")\r\n            this.active_callback()\r\n          }\r\n        })\r\n    }\r\n\r\n    setActiveCallback(callback) {\r\n        this.active_callback = callback\r\n    }\r\n\r\n    setDisactiveCallback(callback) {\r\n        this.disactive_callback = callback\r\n    }\r\n\r\n    isActive() {\r\n        return this.elem.classList.contains(\"active\")\r\n    }\r\n\r\n\r\n}","/**\r\n * @module global_var\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0 alpha 3\r\n */\r\n\r\nexport const HEADER_HEIGHT = 60\r\nexport const BOTTOM_PANEL_HEIGHT = 50","/**\r\n * @module math\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0\r\n */\r\n\r\n'use strict'\r\n\r\nexport default class Mymath {\r\n  /**\r\n   * get a number in radians from degrees\r\n   * @param {number} deg\r\n   * @return {number}\r\n   */\r\n  static toRad (deg) { return 0.017453292519943295 * deg }\r\n\r\n  /**\r\n   * get a number in degrees from radians\r\n   * @param {number} rad\r\n   * @return {number}\r\n   */\r\n  static toDeg (rad) { return rad / 0.017453292519943295 }\r\n\r\n  /**\r\n   * get square\r\n   * @param {number} num\r\n   * @param {number=} 2 pow\r\n   * @return {number}\r\n   */\r\n  static sqrt (num, pow = 2) { return Math.pow(num, 1 / pow) }\r\n  \r\n  /**\r\n   * get random whole number\r\n   * @param {number} from\r\n   * @param {number} to\r\n   * return {number}\r\n   */\r\n  static getRnd (from, to) { return Math.floor(Math.random() * (to - from + 1) + from) }\r\n\r\n  /**\r\n   * get a distance between two point\r\n   * @param {number} x1\r\n   * @param {number} y1\r\n   * @param {number} x2\r\n   * @param {number} y2\r\n   * @return {number}\r\n   */\r\n  static distance (x1, y1, x2, y2) { return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)) }\r\n\r\n  /**\r\n   * get a middle point between two points\r\n   * @param {number} x1\r\n   * @param {number} y1\r\n   * @param {number} x2\r\n   * @param {number} y2\r\n   * @return {{x: number, y: number}}\r\n   */\r\n  static midpoint (x1, y1, x2, y2)  {\r\n    let x, y;\r\n\r\n    x = (x2 + x1)*0.5;\r\n    y = (y2 + y1)*0.5;\r\n\r\n    return {x: x, y: y}\r\n  }\r\n\r\n  /**\r\n   * Log\r\n   * @param {number} exp\r\n   * @param {number=} 10 base\r\n   */\r\n  static log(exp, base = 10) {\r\n    return Math.log(exp) / Math.log(base)\r\n  }\r\n\r\n  /**\r\n    * convert a polar coordinate to a decart coordinate\r\n    * @param {number} angle\r\n    * @param {number} radius\r\n    * @return {{x: number, y:number}}\r\n    */\r\n  static toDecart (angle, radius) {\r\n\t\tlet x, y\r\n\r\n\t\tx = radius * Math.cos(angle)\r\n\t\ty = radius * Math.sin(angle)\r\n\r\n\t\treturn {x: x, y: y};\r\n\t}\r\n\r\n  /**\r\n    * convert a decart coordinate to a polar coordinate\r\n    * @param {number} x\r\n    * @param {number} y\r\n    * @return {{radius: number, angle: number}}\r\n    */\r\n\tstatic toPolar (x, y)  {\r\n\t\tlet angle, radius\r\n\r\n    radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))\r\n\r\n      //angle = Math.acos((Math.pow(radius, 2) + Math.pow(x, 2) - Math.pow(y, 2)) / (2 * radius * x));\r\n      angle = Math.atan2(y, x)\r\n\r\n      return {radius: radius, angle: angle}\r\n  }\r\n\r\n}\r\n","/**\r\n * @module Modal\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0 beta 1\r\n *\r\n */\r\n\r\nexport default class Modal {\r\n  constructor(el) {\r\n    this.el = el\r\n\r\n    this.el.parentNode.addEventListener(\"click\", (evt) => {\r\n      if (evt.target.classList.contains(\"active\"))\r\n        this.hide();\r\n    })\r\n\r\n    addEventListener(\"keydown\", (evt) => {\r\n      if(this.isActive() && (evt.keyCode === 13 || evt.keyCode === 32))\r\n        this.hide();\r\n    })\r\n  }\r\n\r\n  show() {\r\n    this.el.classList.remove(\"disactive\")\r\n    this.el.classList.add(\"active\")\r\n    document.querySelector(\".content\").style.filter = \"blur(3px)\"\r\n  }\r\n\r\n  hide() {\r\n    this.el.classList.remove(\"active\")\r\n    this.el.classList.add(\"disactive\")\r\n    document.querySelector(\".content\").style.filter = \"\"\r\n  }\r\n\r\n  setContent(mess) {\r\n    this.el.querySelector(\".modal__body\").innerHTML = mess\r\n  }\r\n\r\n  setHeader(mess) {\r\n    this.el.querySelector(\".modal__header\").querySelector(\"h3\").innerHTML = mess\r\n  }\r\n\r\n  setFooter(mess) {\r\n    this.el.querySelector(\".modal__footer\").innerHTML = mess\r\n  }\r\n\r\n  isActive() {\r\n    if (this.el.classList.contains(\"active\"))\r\n      return true\r\n    return false\r\n  }\r\n}","/**\r\n * @module mouse\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0 alpha 3\r\n * @todo довести до ума\r\n */\r\n\r\nexport default class Mouse {\r\n  constructor () {\r\n    this.down_x  = null\r\n    this.down_y  = null\r\n    this.move_x  = null // Move x\r\n    this.move_y  = null // Move y\r\n    this.up_x    = null // End x\r\n    this.up_y    = null // End y\r\n    this.dx      = null // Delta x\r\n    this.dy      = null // Delta y\r\n    this._dx     = null // Не сбрасывается\r\n    this._dy     = null\r\n    this.flip_dx = null // покадровый дельта\r\n    this.flip_dy = null\r\n\r\n    this.down    = false\r\n    this.wheel   = null\r\n    this._wheel  = null\r\n    this.first   = true\r\n    \r\n    this.velocity = {\r\n      x: null,\r\n      y: null\r\n    }\r\n\r\n    this.time = {\r\n      down: null,\r\n      move: null,\r\n      last_move: null,\r\n      dmove: null,\r\n      up: null\r\n    }\r\n\r\n    this.last = {\r\n      move_x: null,\r\n      move_y: null,\r\n      dx: null,\r\n      dy: null\r\n    }\r\n\r\n    this._edx = null // save touch._dx\r\n    this._edy = null\r\n  }\r\n\r\n  init(context) {\r\n    context.addEventListener(\"mousedown\", (evt) => {\r\n      this.time.down = Date.now()\r\n\r\n      this.first = true\r\n\r\n      this.down_x = evt.clientX\r\n      this.down_y = evt.clientY\r\n\r\n      this.down = true\r\n    })\r\n\r\n    context.addEventListener(\"mousemove\", (evt) => {\r\n\r\n      this.time.move = Date.now()\r\n      this.time.dmove = this.time.move - this.time.last_move\r\n\r\n      this.move_x = evt.clientX\r\n      this.move_y = evt.clientY\r\n\r\n      if (this.first) { // это нуобходимо, чтобы первые дельты были не от нуля.\r\n        this.last.move_x = this.move_x \r\n        this.last.move_y = this.move_y\r\n        this.time.last_move = this.time.move\r\n      }\r\n\r\n      this.flip_dx = this.move_x - this.last.move_x\r\n      this.flip_dy = this.move_y - this.last.move_y\r\n\r\n      if (this.down) {\r\n        this.dx = this.move_x - this.down_x\r\n        this.dy = this.move_y - this.down_y\r\n\r\n        this._dx = this._edx + this.dx\r\n        this._dy = this._edy + this.dy\r\n      }\r\n\r\n      this.velocity.x = this.flip_dx / this.time.dmove;\r\n      this.velocity.y = this.flip_dy / this.time.dmove;\r\n      \r\n      this.last.move_x = this.move_x\r\n      this.last.move_y = this.move_y\r\n\r\n      this.time.last_move = this.time.move\r\n\r\n      if (this.first) \r\n        this.first = false\r\n    })\r\n\r\n    context.addEventListener(\"mouseup\", (evt) => {\r\n      this.time.up = Date.now()\r\n\r\n      this.down = false\r\n\r\n      this.up_x = evt.clientX\r\n      this.up_y = evt.clientY\r\n\r\n      this._edx = this._dx\r\n      this._edy = this._dy\r\n    })\r\n\r\n    context.addEventListener(\"wheel\", (evt) => {\r\n      this.wheel = evt.deltaY\r\n      this._wheel += evt.deltaY\r\n    })\r\n  }\r\n}","\r\n/**\r\n *\r\n * @module plot\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0 beta 1\r\n *\r\n * @todo Решение прерываний функция\r\n */\r\n\r\n'use strict'\r\n\r\nimport * as VAR from './global_var'\r\nimport Mymath   from './math'\r\nimport Mouse    from './mouse'\r\nimport Touch    from './touch'\r\n\r\n// т.к eval не видит Mymath\r\nlet log = Mymath.log\r\nlet randomInt = Mymath.getRnd\r\n\r\nexport default class Plot {\r\n  /**\r\n   * Create a Plot\r\n   * @param {HTMLCanvasElement} canvas - for drawing\r\n   * @param {Number} width of the plot\r\n   * @param {Number} heigh of the plot\r\n   */\r\n  constructor(canvas, width, height) {\r\n    this.mouse = new Mouse()\r\n    this.mouse.init(canvas);\r\n\r\n    this.touch = new Touch()\r\n    this.touch.init(canvas)\r\n\r\n    this.width = width\r\n    this.height = height\r\n\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    this.canvas = canvas\r\n\r\n    this.ctx = this.canvas.getContext(\"2d\")\r\n\r\n    this.start_time = performance.now()\r\n\r\n    this.pos = {\r\n      x: 0,\r\n      y: 0\r\n    }\r\n\r\n    this.ratio = null\r\n    this.scale = 1\r\n\r\n    this.centerCanvasX = this.canvas.width * 0.5\r\n    this.centerCanvasY = this.canvas.height * 0.5\r\n\r\n    this.centerX = this.centerCanvasX + this.pos.x\r\n    this.centerY = this.centerCanvasY + this.pos.y\r\n\r\n    this.functions = []\r\n    this.derivatives = []\r\n\r\n    this.inertia = {\r\n      x: 0,\r\n      y: 0\r\n    }\r\n    \r\n    // common position cursor for a mouse and a touchpad\r\n    this.cursor = {\r\n      x: 0,\r\n      y: 0\r\n    }\r\n\r\n    this.states = {\r\n      moveable: true,\r\n      build_derivatives: false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  update() {\r\n    this.canvas.width = this.width\r\n    this.canvas.height = this.height\r\n\r\n    this.centerCanvasX = this.canvas.width * 0.5\r\n    this.centerCanvasY = this.canvas.height * 0.5\r\n\r\n    this.centerX = this.centerCanvasX + this.pos.x\r\n    this.centerY = this.centerCanvasY + this.pos.x\r\n  }\r\n\r\n  /**\r\n   * initialization and setting\r\n   * @param {?Object}           user_options\r\n   * @param {number=} 50        user_options.ratio\r\n   * @param {number=} 1         user_options.scale\r\n   * @param {number=} 1         user_options.detail\r\n   * @param {string=} \"#ECEFF1\" user_options.background\r\n   * @param {number=} 2         user_options.axisLineWidth\r\n   * @param {string=} \"#9E9E9E\" user_options.axisColor\r\n   * @param {number=} 20        user_options.axisOffsetWidth\r\n   * @param {number=} 20        user_options.axisOffsetHeight\r\n   * @param {string=} \"#E64A19\" user_options.functionColor\r\n   * @param {number=} 2         user_options.functionWidth\r\n   * @param {string=} \"#ccc\"    user_options.cellColor\r\n   * @param {string=} \"#00BCD4\" user_options.murkupColor\r\n   * @param {number=} 1         user_options.murkupLineWidth\r\n   * @param {string=} \"#00BCD4\" user_options.murkupTextColor\r\n   * @param {string=} \"#aaa\"    user_options.derivativeColor\r\n   * @param {string=} \"#E04715\" user_options.dotColor\r\n   */     \r\n  init(user_options = {}) {\r\n\r\n    this.user_options = user_options\r\n\r\n    // defaul settings\r\n    this.def_options = {\r\n      ratio:            50,\r\n      scale:            1,\r\n      detail:           1,\r\n      background:       \"#ECEFF1\",\r\n      axisLineWidth:    2,\r\n      axisColor:        \"#9E9E9E\",\r\n      axisOffsetWidth:  20,\r\n      axisOffsetHeight: 20,\r\n      functionColor:    \"#E64A19\",\r\n      functionWidth:    2,\r\n      cellColor:        \"#ccc\",\r\n      markupColor:      \"#00BCD4\",\r\n      markupLineWidth:  1,\r\n      markupTextColor:  \"#00BCD4\",\r\n      derivativeColor:  \"#aaa\",\r\n      dotColor:         \"#E04715\"\r\n    }\r\n\r\n    this.app_options = {}\r\n\r\n    this.ratio = user_options.ratio || this.def_options.ratio\r\n    this.scale = user_options.scale || this.def_options.scale\r\n\r\n    for (let property in this.def_options) {\r\n      this.app_options[property] = this.user_options[property] || this.def_options[property]\r\n    }\r\n\r\n    if (device.desktop()) {\r\n      this.canvas.addEventListener(\"mousedown\", (evt) => {\r\n        this.inertia.x = 0\r\n        this.inertia.y = 0\r\n      })\r\n\r\n      this.canvas.addEventListener(\"mousemove\", (evt) => {\r\n          if (this.mouse.down && this.states.moveable)\r\n            this.move(this.mouse.flip_dx, this.mouse.flip_dy)\r\n          this.cursor.x = this.mouse.move_x\r\n          this.cursor.y = this.mouse.move_y\r\n      })\r\n\r\n      this.canvas.addEventListener(\"mouseup\", (evt) => {\r\n        this.inertia.x = this.mouse.flip_dx\r\n        this.inertia.y = this.mouse.flip_dy\r\n      })\r\n\r\n      this.canvas.addEventListener(\"wheel\", (evt) => {\r\n        if (evt.deltaY > 0 && this.scale > 0.2) {\r\n          this.toScale(0.95, evt.clientX, evt.clientY)\r\n        } else if (evt.deltaY < 0 && this.scale < 5) {\r\n          this.toScale(1.05, evt.clientX, evt.clientY)\r\n        }\r\n      })\r\n    } else if (device.mobile()) {\r\n      this.canvas.addEventListener(\"touchstart\", (evt) => {\r\n        this.cursor.x = this.touch.down_x[0]\r\n        this.cursor.y = this.touch.down_y[0]\r\n      })\r\n\r\n      this.canvas.addEventListener(\"touchmove\", (evt) => {\r\n        \r\n        if (this.touch.count_fingers === 1 && this.states.moveable)\r\n          this.move(this.touch.flip_dx[0], this.touch.flip_dy[0])\r\n        if (this.touch.count_fingers === 2) {\r\n          let middle_point = Mymath.midpoint(this.touch.move_x[0], this.touch.move_y[1], this.touch.move_x[1], this.touch.move_y[1])\r\n          if ((this.scale < 10.0 || this.touch.flip_scale < 1) && (this.scale > 0.2 || this.touch.flip_scale > 1))\r\n            this.toScale(this.touch.flip_scale, middle_point.x, middle_point.y)\r\n        }\r\n        this.cursor.x = this.touch.move_x[0]\r\n        this.cursor.y = this.touch.move_y[0]\r\n      })\r\n\r\n      this.canvas.addEventListener(\"touchend\", (evt) => {\r\n        if (this.touch.count_fingers == 1) {\r\n          this.inertia.x = this.touch.flip_dx[0]\r\n          this.inertia.y = this.touch.flip_dy[0]\r\n        }\r\n      })\r\n    }\r\n    \r\n    addEventListener(\"resize\", (evt) => {\r\n      this.width = innerWidth;\r\n      this.height = innerHeight - VAR.HEADER_HEIGHT - VAR.BOTTOM_PANEL_HEIGHT\r\n      this.update()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * add a func to the array of functions\r\n   * @param {string} func\r\n   */\r\n  add(func) {\r\n    this.functions.push(func)\r\n  }\r\n\r\n  /**\r\n   * remove a func from the array of functions\r\n   * @param {number} num\r\n   */\r\n  remove(num) {\r\n    delete this.functions[num]\r\n  }\r\n\r\n  /**\r\n   * set a fun in the array of functions\r\n   * @param {number} num\r\n   * @param {string} func\r\n   */\r\n\tset (num, func) {\r\n\t\tthis.functions[num] = func\r\n\t}\r\n\r\n  /**\r\n   * scale the plot.\r\n   * @param {number} scale - new scale is last scale + this scale\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  toScale(scale, x = this.centerCanvasX, y = this.centerCanvasY) {\r\n    this.ratio *= scale\r\n    this.scale = this.ratio / this.def_options.ratio\r\n    this.pos.x = this.pos.x * scale - (x - this.centerCanvasX) * (scale - 1)\r\n    this.pos.y = this.pos.y * scale - (y - this.centerCanvasY - VAR.HEADER_HEIGHT) * (scale - 1)\r\n  }\r\n\r\n  /**\r\n   * set the scale\r\n   * @param {Number} scale\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  setScale(scale, x, y) {\r\n    let dscale = scale - this.scale\r\n    this.ratio *= scale / this.scale\r\n    this.scale = scale\r\n    this.pos.x = this.pos.x * (dscale+1) - (x - this.centerCanvasX) * (dscale)\r\n    this.pos.y = this.pos.y * (dscale+1) - (y - this.centerCanvasY - VAR.HEADER_HEIGHT) * (dscale)\r\n  }\r\n\r\n  /**\r\n   * move relative the current position\r\n   * @param {Number} dx\r\n   * @param {Number} dy\r\n   */\r\n  move(dx, dy) {\r\n    if (typeof dx != Number || typeof dy != Number) {\r\n      dx = Number(dx)\r\n      dy = Number(dy)\r\n    }\r\n    this.pos.x += dx\r\n    this.pos.y += dy\r\n  }\r\n\r\n  /**\r\n   * set position\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  setPosition(x, y) {\r\n    this.pos.x = x\r\n    this.pos.y = y\r\n  }\r\n  /**\r\n   * remove all functions\r\n   */\r\n  clear() {\r\n    this.functions = []\r\n  }\r\n\r\n  /**\r\n   * set state\r\n   * @param {} state\r\n   */\r\n  setState(state, value) {\r\n    switch (state) {\r\n      case \"moveable\":\r\n        this.states.moveable = value\r\n        break\r\n      case \"build_derivatives\":\r\n        this.states.build_derivatives = value\r\n        break\r\n    }\r\n  }\r\n\r\n  _draw_points(array) {\r\n    this.ctx.save()\r\n    this.ctx.translate(this.centerX, this.centerY)\r\n    this.ctx.strokeStyle = this.app_options.derivativeColor\r\n\r\n    let isStart = true\r\n    for (let i = Math.round(-this.centerX + this.app_options.axisOffsetWidth), step = this.app_options.detail, j = 1;  i < Math.round(this.centerCanvasX - this.pos.x - this.app_options.axisOffsetWidth); i += step, j++) {\r\n      if (isStart) {\r\n        this.ctx.beginPath()\r\n        this.ctx.moveTo(i, -array[j]*this.ratio)\r\n        isStart = false\r\n        continue\r\n      }\r\n      this.ctx.lineTo(i, -array[j]*this.ratio)\r\n    }\r\n\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n  }\r\n  /**\r\n   * draw all in canvas.\r\n   */\r\n  render() {\r\n    const ctx = this.ctx;\r\n    const pos = this.pos;\r\n\r\n    if (this.states.moveable)\r\n      this.move(this.inertia.x, this.inertia.y);\r\n    if (Math.abs(this.inertia.x) > 0.1)\r\n      this.inertia.x *= 0.95\r\n    else {\r\n      if (this.inertia.x !== 0)\r\n        this.inertia.x = 0;\r\n    }\r\n\r\n    if (Math.abs(this.inertia.y) > 0.1)\r\n      this.inertia.y *= 0.95\r\n    else {\r\n      if (this.inertia.y !== 0)\r\n        this.inertia.y = 0\r\n    }\r\n\r\n    this.centerX = this.centerCanvasX + pos.x\r\n    this.centerY = this.centerCanvasY + pos.y\r\n\r\n    this.current_time = performance.now()\r\n    let time = this.current_time - this.start_time\r\n    \r\n    let mx = this.cursor.x / this.ratio - this.centerX/this.ratio\r\n    let my = -(this.cursor.y / this.ratio) + this.centerY/this.ratio + VAR.HEADER_HEIGHT/this.ratio\r\n    // background\r\n    ctx.save()\r\n    ctx.fillStyle = this.app_options.background\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n    ctx.restore()\r\n\r\n    // render axis x, y\r\n\r\n    ctx.save()\r\n    ctx.lineWidth    = this.app_options.axisLineWidth\r\n    ctx.strokeStyle  = this.app_options.axisColor\r\n    ctx.fillStyle    = this.app_options.markupTextColor\r\n    ctx.textAlign    = \"center\"\r\n    ctx.textBaseline = \"middle\"\r\n    ctx.font         = \"12px sans-serif\"\r\n\r\n    ctx.translate(this.centerX, this.centerY)\r\n\r\n    // draw the line of axis x\r\n    ctx.beginPath()\r\n    ctx.moveTo(this.app_options.axisOffsetWidth - this.centerCanvasX - pos.x, 0)\r\n    ctx.lineTo(this.centerCanvasX - this.app_options.axisOffsetWidth - pos.x, 0)\r\n    ctx.stroke()\r\n\r\n    // draw the triangle on axis x\r\n    ctx.save()\r\n    ctx.beginPath()\r\n    ctx.translate(this.centerCanvasX - this.app_options.axisOffsetWidth - pos.x, 0)\r\n    ctx.moveTo(0, 0)\r\n    ctx.lineTo(0, -5)\r\n    ctx.lineTo(9, 0)\r\n    ctx.lineTo(0, 5)\r\n    ctx.closePath()\r\n    ctx.fill()\r\n    ctx.font = \"15px sans-serif\"\r\n    ctx.fillText(\"x\", 0, 15)\r\n    ctx.restore()\r\n\r\n    // draw the line of axis y\r\n    ctx.beginPath()\r\n    ctx.moveTo(0, this.app_options.axisOffsetHeight - this.centerCanvasY - pos.y)\r\n    ctx.lineTo(0, this.centerCanvasY - this.app_options.axisOffsetHeight - pos.y)\r\n    ctx.stroke()\r\n\r\n    // draw the triangle y on axis y\r\n    ctx.save()\r\n    ctx.beginPath()\r\n    ctx.translate(0, this.app_options.axisOffsetHeight - this.centerCanvasY - pos.y)\r\n    ctx.moveTo(0, 0)\r\n    ctx.lineTo(-5, 0)\r\n    ctx.lineTo(0, -9)\r\n    ctx.lineTo(5, 0)\r\n    ctx.closePath()\r\n    ctx.fill()\r\n    ctx.font = \"15px sans-serif\"\r\n    ctx.fillText(\"y\", -15, 0)\r\n    ctx.restore()\r\n\r\n    // draw the murkup for the axis x\r\n    ctx.strokeStyle = this.app_options.markupTextColor\r\n    ctx.lineWidth = this.app_options.markupTextLineWidth\r\n\r\n    let countX = Math.ceil((this.canvas.width - 2 * this.app_options.axisOffsetWidth) / this.ratio)\r\n    countX = countX % 2 === 0 ? countX : countX - 1\r\n\r\n    for (let i = 1 - Math.ceil(pos.x / this.ratio); i <= countX - Math.ceil(pos.x / this.ratio); i++) {\r\n      if (i - countX / 2 !== 0) {\r\n        let x = i * this.ratio - (countX * this.ratio / 2)\r\n\r\n        ctx.beginPath()\r\n        ctx.save()\r\n        ctx.lineWidth = 1\r\n        ctx.strokeStyle = this.app_options.cellColor\r\n        ctx.moveTo(x, -pos.y - this.height / 2 + 20)\r\n        ctx.lineTo(x, -pos.y + this.height / 2 - 20)\r\n        ctx.stroke()\r\n        ctx.restore()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(x, -3)\r\n        ctx.lineTo(x, 3)\r\n        ctx.stroke()\r\n        ctx.fillText(i - countX / 2, x, 15)\r\n      }\r\n    }\r\n\r\n    // draw the murkup for the axis y\r\n    let countY = Math.ceil((this.canvas.height - 2 * this.app_options.axisOffsetHeight) / this.ratio)\r\n    countY = countY % 2 == 0 ? countY : countY - 1\r\n\r\n    for (let i = 1 - Math.ceil(pos.y / this.ratio); i <= countY - Math.ceil(pos.y / this.ratio); i++) {\r\n      if (i - countY / 2 !== 0) {\r\n        let y = i * this.ratio - (countY * this.ratio / 2)\r\n        ctx.beginPath()\r\n        ctx.save()\r\n        ctx.lineWidth = 1\r\n        ctx.strokeStyle = this.app_options.cellColor\r\n        ctx.moveTo(-pos.x - this.width / 2 + 20, y)\r\n        ctx.lineTo(-pos.x + this.width / 2 - 20, y)\r\n        ctx.stroke()\r\n        ctx.restore()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(-3, y)\r\n        ctx.lineTo(3, y)\r\n        ctx.stroke()\r\n        ctx.fillText(-(i - countY / 2), -10, y)\r\n      }\r\n    }\r\n\r\n    ctx.restore()\r\n\r\n    // draw the functions\r\n    this.functions.forEach((func, id) => {\r\n      let x, y, last_y,\r\n          isStart = true\r\n\r\n      ctx.save()\r\n      ctx.translate(this.centerX, this.centerY)\r\n\r\n      ctx.lineWidth = this.user_options.functionWidth || this.def_options.functionWidth\r\n      ctx.strokeStyle = this.user_options.functionColor || this.def_options.functionColor\r\n\r\n      this.derivatives[id] = []\r\n\r\n      for (let i = Math.round(-this.centerX + this.app_options.axisOffsetWidth), step = this.app_options.detail, j = 0;  i < Math.round(this.centerCanvasX - pos.x - this.app_options.axisOffsetWidth); i += step, j++) {\r\n        // each pixel\r\n        x = i / this.ratio\r\n        y = eval(func)\r\n\r\n        if (isStart)\r\n          last_y = y\r\n        let derivative = (y - last_y) / (step / this.ratio);\r\n        this.derivatives[id][j] = derivative\r\n        last_y = y\r\n        y = -y * this.ratio\r\n\r\n        // @todo доработать\r\n        // if () {\r\n        //   ctx.stroke()\r\n        //   ctx.beginPath();\r\n        //   ctx.moveTo(i, y)\r\n        //   continue\r\n        // }\r\n         \r\n        \r\n        if (isStart) {\r\n          ctx.beginPath()\r\n          ctx.moveTo(i, y)\r\n          isStart = false\r\n          continue\r\n        }\r\n\r\n        ctx.lineTo(i, y)\r\n      }\r\n\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      if (this.states.build_derivatives)\r\n        this._draw_points(this.derivatives[id])\r\n    })\r\n\r\n    this.functions.forEach((func, id) => {\r\n      ctx.beginPath()\r\n      ctx.fillStyle = this.app_options.dotColor\r\n      let x = (this.cursor.x - this.centerX) / this.ratio\r\n      ctx.arc(this.cursor.x, -eval(func)*this.ratio + this.centerY, 3, 0, Math.PI * 2, true)\r\n      ctx.fill()\r\n    })\r\n  }\r\n} // Plot","/**\r\n * @module touch\r\n * @author Whekin <stanislavkalishin@gmail.com>\r\n * @version 1.0 alpha 3\r\n * @todo довести до ума\r\n */\r\n\r\nimport Mymath from './math'\r\n\r\nexport default class Touch {\r\n  constructor() {\r\n    this.down_distance = null\r\n    this.move_distance = null\r\n    this.count_fingers = 0\r\n    this.flip_scale    = 1 // моментальный scale\r\n    this.ddistance     = null\r\n    this.flip_dx       = [null]\r\n    this.flip_dy       = [null]\r\n    this.down_x        = [null]\r\n    this.down_y        = [null]\r\n    this.move_x        = [null]\r\n    this.move_y        = [null]\r\n    this.dscale        = 0\r\n    this.first         = true\r\n    this._dx           = [null] // Не сбрасывается\r\n    this._dy           = [null]\r\n    this.up_x          = null\r\n    this.up_y          = null\r\n    this.dx            = [null] // Delta x\r\n    this.dy            = [null] // Delta y\r\n    \r\n    this.last = {\r\n      move_x: [null],\r\n      move_y: [null],\r\n      count_fingers: null,\r\n      distance: null\r\n    }\r\n    \r\n    this._edx = [null] // save this._dx\r\n    this._edy = [null]\r\n  }\r\n  \r\n  /**\r\n   * @param {} context\r\n   */\r\n  init(context) {\r\n    context.addEventListener(\"touchstart\", (evt) => {\r\n      evt.preventDefault()\r\n      \r\n      this.first = true\r\n      this.count_fingers = evt.touches.length\r\n\r\n      for (let i = 0; i < this.count_fingers; i++) {\r\n        this.down_x[i] = evt.touches[i].clientX\r\n        this.down_y[i] = evt.touches[i].clientY\r\n\r\n        this.flip_dx[i] = 0\r\n        this.flip_dy[i] = 0\r\n      }\r\n\r\n      if (this.count_fingers == 2) {\r\n        this.down_distance = Mymath.distance(this.down_x[0], this.down_y[0], this.down_x[1], this.down_y[1])\r\n      }\r\n    })\r\n\r\n    context.addEventListener(\"touchmove\", (evt) => {\r\n      this.count_fingers = evt.touches.length\r\n\r\n      if (this.count_fingers === 1 && this.last.count_fingers === 2 && this.up_x === this.last.move_x[0] && this.up_y === this.last.move_y[0]) {\r\n          this.last.move_x[0] = this.last.move_x[1]\r\n          this.last.move_y[0] = this.last.move_y[1]\r\n      }\r\n\r\n      for (let i = 0; i < this.count_fingers; i++) {\r\n        this.move_x[i] = evt.touches[i].clientX\r\n        this.move_y[i] = evt.touches[i].clientY\r\n\r\n        this.dx[i] = this.move_x[i] - this.down_x[i]\r\n        this.dy[i] = this.move_y[i] - this.down_y[i]\r\n\r\n        if (this.first) {\r\n          this.last.move_x[i] = this.move_x[i]\r\n          this.last.move_y[i] = this.move_y[i]\r\n        }\r\n\r\n        this._dx[i] = this._edx[i] + this.dx[i]\r\n        this._dy[i] = this._edy[i] + this.dy[i]\r\n\r\n        this.flip_dx[i] = this.move_x[i] - this.last.move_x[i]\r\n        this.flip_dy[i] = this.move_y[i] - this.last.move_y[i]\r\n      }\r\n\r\n      if (this.count_fingers == 2) {\r\n        this.move_distance = Mymath.distance(this.move_x[0], this.move_y[0], this.move_x[1], this.move_y[1])\r\n        this.dscale = this.move_distance / this.down_distance\r\n        this.ddistance = this.move_distance - this.down_distance\r\n        if (this.first)\r\n          this.last.distance = this.move_distance\r\n        this.flip_scale = this.move_distance / this.last.distance\r\n      }\r\n\r\n      for (let i = 0; i < this.count_fingers; i++) {\r\n        this.last.move_x[i] = this.move_x[i]\r\n        this.last.move_y[i] = this.move_y[i]\r\n      }\r\n\r\n      this.last.count_fingers = this.count_fingers\r\n      this.last.distance = this.move_distance\r\n\r\n      if (this.first)\r\n        this.first = false\r\n    })\r\n\r\n    addEventListener(\"touchend\", (evt) => {\r\n      this.up_x = evt.changedTouches[0].clientX\r\n      this.up_y = evt.changedTouches[0].clientY\r\n\r\n      this._edx[0] = this._dx[0]\r\n      this._edy[0] = this._dy[0]\r\n      \r\n      this.count_fingers = evt.touches.length\r\n      console.log(evt.which)\r\n    })\r\n  }\r\n}"],"sourceRoot":""}